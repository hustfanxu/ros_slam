// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/optimizing_local_trajectory_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();

class OptimizingLocalTrajectoryBuilderOptions;

// ===================================================================

class OptimizingLocalTrajectoryBuilderOptions : public ::google::protobuf::Message {
 public:
  OptimizingLocalTrajectoryBuilderOptions();
  virtual ~OptimizingLocalTrajectoryBuilderOptions();

  OptimizingLocalTrajectoryBuilderOptions(const OptimizingLocalTrajectoryBuilderOptions& from);

  inline OptimizingLocalTrajectoryBuilderOptions& operator=(const OptimizingLocalTrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizingLocalTrajectoryBuilderOptions& default_instance();

  void Swap(OptimizingLocalTrajectoryBuilderOptions* other);

  // implements Message ----------------------------------------------

  OptimizingLocalTrajectoryBuilderOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptimizingLocalTrajectoryBuilderOptions& from);
  void MergeFrom(const OptimizingLocalTrajectoryBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double high_resolution_grid_scale = 6;
  inline bool has_high_resolution_grid_scale() const;
  inline void clear_high_resolution_grid_scale();
  static const int kHighResolutionGridScaleFieldNumber = 6;
  inline double high_resolution_grid_scale() const;
  inline void set_high_resolution_grid_scale(double value);

  // optional double low_resolution_grid_scale = 7;
  inline bool has_low_resolution_grid_scale() const;
  inline void clear_low_resolution_grid_scale();
  static const int kLowResolutionGridScaleFieldNumber = 7;
  inline double low_resolution_grid_scale() const;
  inline void set_low_resolution_grid_scale(double value);

  // optional double velocity_scale = 1;
  inline bool has_velocity_scale() const;
  inline void clear_velocity_scale();
  static const int kVelocityScaleFieldNumber = 1;
  inline double velocity_scale() const;
  inline void set_velocity_scale(double value);

  // optional double translation_scale = 2;
  inline bool has_translation_scale() const;
  inline void clear_translation_scale();
  static const int kTranslationScaleFieldNumber = 2;
  inline double translation_scale() const;
  inline void set_translation_scale(double value);

  // optional double rotation_scale = 3;
  inline bool has_rotation_scale() const;
  inline void clear_rotation_scale();
  static const int kRotationScaleFieldNumber = 3;
  inline double rotation_scale() const;
  inline void set_rotation_scale(double value);

  // optional double odometry_translation_scale = 4;
  inline bool has_odometry_translation_scale() const;
  inline void clear_odometry_translation_scale();
  static const int kOdometryTranslationScaleFieldNumber = 4;
  inline double odometry_translation_scale() const;
  inline void set_odometry_translation_scale(double value);

  // optional double odometry_rotation_scale = 5;
  inline bool has_odometry_rotation_scale() const;
  inline void clear_odometry_rotation_scale();
  static const int kOdometryRotationScaleFieldNumber = 5;
  inline double odometry_rotation_scale() const;
  inline void set_odometry_rotation_scale(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
 private:
  inline void set_has_high_resolution_grid_scale();
  inline void clear_has_high_resolution_grid_scale();
  inline void set_has_low_resolution_grid_scale();
  inline void clear_has_low_resolution_grid_scale();
  inline void set_has_velocity_scale();
  inline void clear_has_velocity_scale();
  inline void set_has_translation_scale();
  inline void clear_has_translation_scale();
  inline void set_has_rotation_scale();
  inline void clear_has_rotation_scale();
  inline void set_has_odometry_translation_scale();
  inline void clear_has_odometry_translation_scale();
  inline void set_has_odometry_rotation_scale();
  inline void clear_has_odometry_rotation_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double high_resolution_grid_scale_;
  double low_resolution_grid_scale_;
  double velocity_scale_;
  double translation_scale_;
  double rotation_scale_;
  double odometry_translation_scale_;
  double odometry_rotation_scale_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static OptimizingLocalTrajectoryBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// OptimizingLocalTrajectoryBuilderOptions

// optional double high_resolution_grid_scale = 6;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_high_resolution_grid_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_high_resolution_grid_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_high_resolution_grid_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_high_resolution_grid_scale() {
  high_resolution_grid_scale_ = 0;
  clear_has_high_resolution_grid_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::high_resolution_grid_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.high_resolution_grid_scale)
  return high_resolution_grid_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_high_resolution_grid_scale(double value) {
  set_has_high_resolution_grid_scale();
  high_resolution_grid_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.high_resolution_grid_scale)
}

// optional double low_resolution_grid_scale = 7;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_low_resolution_grid_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_low_resolution_grid_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_low_resolution_grid_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_low_resolution_grid_scale() {
  low_resolution_grid_scale_ = 0;
  clear_has_low_resolution_grid_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::low_resolution_grid_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.low_resolution_grid_scale)
  return low_resolution_grid_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_low_resolution_grid_scale(double value) {
  set_has_low_resolution_grid_scale();
  low_resolution_grid_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.low_resolution_grid_scale)
}

// optional double velocity_scale = 1;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_velocity_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_velocity_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_velocity_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_velocity_scale() {
  velocity_scale_ = 0;
  clear_has_velocity_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::velocity_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.velocity_scale)
  return velocity_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_velocity_scale(double value) {
  set_has_velocity_scale();
  velocity_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.velocity_scale)
}

// optional double translation_scale = 2;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_translation_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_translation_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_translation_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_translation_scale() {
  translation_scale_ = 0;
  clear_has_translation_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::translation_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.translation_scale)
  return translation_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_translation_scale(double value) {
  set_has_translation_scale();
  translation_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.translation_scale)
}

// optional double rotation_scale = 3;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_rotation_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_rotation_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_rotation_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_rotation_scale() {
  rotation_scale_ = 0;
  clear_has_rotation_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::rotation_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.rotation_scale)
  return rotation_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_rotation_scale(double value) {
  set_has_rotation_scale();
  rotation_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.rotation_scale)
}

// optional double odometry_translation_scale = 4;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_odometry_translation_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_odometry_translation_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_odometry_translation_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_odometry_translation_scale() {
  odometry_translation_scale_ = 0;
  clear_has_odometry_translation_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::odometry_translation_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.odometry_translation_scale)
  return odometry_translation_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_odometry_translation_scale(double value) {
  set_has_odometry_translation_scale();
  odometry_translation_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.odometry_translation_scale)
}

// optional double odometry_rotation_scale = 5;
inline bool OptimizingLocalTrajectoryBuilderOptions::has_odometry_rotation_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_has_odometry_rotation_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_has_odometry_rotation_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptimizingLocalTrajectoryBuilderOptions::clear_odometry_rotation_scale() {
  odometry_rotation_scale_ = 0;
  clear_has_odometry_rotation_scale();
}
inline double OptimizingLocalTrajectoryBuilderOptions::odometry_rotation_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.odometry_rotation_scale)
  return odometry_rotation_scale_;
}
inline void OptimizingLocalTrajectoryBuilderOptions::set_odometry_rotation_scale(double value) {
  set_has_odometry_rotation_scale();
  odometry_rotation_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions.odometry_rotation_scale)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
