// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/proto/trajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/proto/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_Node_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fproto_2ftrajectory_2eproto() {
  protobuf_AddDesc_cartographer_2fproto_2ftrajectory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/proto/trajectory.proto");
  GOOGLE_CHECK(file != NULL);
  Trajectory_descriptor_ = file->message_type(0);
  static const int Trajectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, node_),
  };
  Trajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory));
  Trajectory_Node_descriptor_ = Trajectory_descriptor_->nested_type(0);
  static const int Trajectory_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, pose_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, pose_),
  };
  Trajectory_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_Node_descriptor_,
      Trajectory_Node::default_instance_,
      Trajectory_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory_Node));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fproto_2ftrajectory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_Node_descriptor_, &Trajectory_Node::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fproto_2ftrajectory_2eproto() {
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete Trajectory_Node::default_instance_;
  delete Trajectory_Node_reflection_;
}

void protobuf_AddDesc_cartographer_2fproto_2ftrajectory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#cartographer/proto/trajectory.proto\022\022c"
    "artographer.proto\032,cartographer/transfor"
    "m/proto/transform.proto\"\310\001\n\nTrajectory\0221"
    "\n\004node\030\001 \003(\0132#.cartographer.proto.Trajec"
    "tory.Node\032\206\001\n\004Node\022\021\n\ttimestamp\030\001 \001(\003\0226\n"
    "\007pose_2d\030\002 \001(\0132%.cartographer.transform."
    "proto.Rigid2d\0223\n\004pose\030\005 \001(\0132%.cartograph"
    "er.transform.proto.Rigid3dB\026B\024Trajectory"
    "OuterClass", 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/proto/trajectory.proto", &protobuf_RegisterTypes);
  Trajectory::default_instance_ = new Trajectory();
  Trajectory_Node::default_instance_ = new Trajectory_Node();
  Trajectory::default_instance_->InitAsDefaultInstance();
  Trajectory_Node::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fproto_2ftrajectory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fproto_2ftrajectory_2eproto {
  StaticDescriptorInitializer_cartographer_2fproto_2ftrajectory_2eproto() {
    protobuf_AddDesc_cartographer_2fproto_2ftrajectory_2eproto();
  }
} static_descriptor_initializer_cartographer_2fproto_2ftrajectory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Trajectory_Node::kTimestampFieldNumber;
const int Trajectory_Node::kPose2DFieldNumber;
const int Trajectory_Node::kPoseFieldNumber;
#endif  // !_MSC_VER

Trajectory_Node::Trajectory_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.proto.Trajectory.Node)
}

void Trajectory_Node::InitAsDefaultInstance() {
  pose_2d_ = const_cast< ::cartographer::transform::proto::Rigid2d*>(&::cartographer::transform::proto::Rigid2d::default_instance());
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

Trajectory_Node::Trajectory_Node(const Trajectory_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.proto.Trajectory.Node)
}

void Trajectory_Node::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  pose_2d_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory_Node::~Trajectory_Node() {
  // @@protoc_insertion_point(destructor:cartographer.proto.Trajectory.Node)
  SharedDtor();
}

void Trajectory_Node::SharedDtor() {
  if (this != default_instance_) {
    delete pose_2d_;
    delete pose_;
  }
}

void Trajectory_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_Node_descriptor_;
}

const Trajectory_Node& Trajectory_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory_Node* Trajectory_Node::default_instance_ = NULL;

Trajectory_Node* Trajectory_Node::New() const {
  return new Trajectory_Node;
}

void Trajectory_Node::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_pose_2d()) {
      if (pose_2d_ != NULL) pose_2d_->::cartographer::transform::proto::Rigid2d::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.proto.Trajectory.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose_2d;
        break;
      }

      // optional .cartographer.transform.proto.Rigid2d pose_2d = 2;
      case 2: {
        if (tag == 18) {
         parse_pose_2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 5;
      case 5: {
        if (tag == 42) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.proto.Trajectory.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.proto.Trajectory.Node)
  return false;
#undef DO_
}

void Trajectory_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.proto.Trajectory.Node)
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid2d pose_2d = 2;
  if (has_pose_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pose_2d(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.proto.Trajectory.Node)
}

::google::protobuf::uint8* Trajectory_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.proto.Trajectory.Node)
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid2d pose_2d = 2;
  if (has_pose_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pose_2d(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.proto.Trajectory.Node)
  return target;
}

int Trajectory_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .cartographer.transform.proto.Rigid2d pose_2d = 2;
    if (has_pose_2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose_2d());
    }

    // optional .cartographer.transform.proto.Rigid3d pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory_Node::MergeFrom(const Trajectory_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pose_2d()) {
      mutable_pose_2d()->::cartographer::transform::proto::Rigid2d::MergeFrom(from.pose_2d());
    }
    if (from.has_pose()) {
      mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Node::CopyFrom(const Trajectory_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Node::IsInitialized() const {

  return true;
}

void Trajectory_Node::Swap(Trajectory_Node* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(pose_2d_, other->pose_2d_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_Node_descriptor_;
  metadata.reflection = Trajectory_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Trajectory::kNodeFieldNumber;
#endif  // !_MSC_VER

Trajectory::Trajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.proto.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.proto.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:cartographer.proto.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New() const {
  return new Trajectory;
}

void Trajectory::Clear() {
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.proto.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.proto.Trajectory.Node node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.proto.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.proto.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.proto.Trajectory)
  // repeated .cartographer.proto.Trajectory.Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.proto.Trajectory)
}

::google::protobuf::uint8* Trajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.proto.Trajectory)
  // repeated .cartographer.proto.Trajectory.Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.proto.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
  int total_size = 0;

  // repeated .cartographer.proto.Trajectory.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
