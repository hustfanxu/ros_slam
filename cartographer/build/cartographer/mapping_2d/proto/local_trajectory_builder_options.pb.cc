// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/local_trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_2d/proto/local_trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_2d {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalTrajectoryBuilderOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping_2d/proto/local_trajectory_builder_options.proto");
  GOOGLE_CHECK(file != NULL);
  LocalTrajectoryBuilderOptions_descriptor_ = file->message_type(0);
  static const int LocalTrajectoryBuilderOptions_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, horizontal_laser_min_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, horizontal_laser_max_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, horizontal_laser_voxel_filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, use_online_correlative_scan_matching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, adaptive_voxel_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, real_time_correlative_scan_matcher_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, ceres_scan_matcher_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, motion_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, pose_tracker_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, submaps_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, use_imu_data_),
  };
  LocalTrajectoryBuilderOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalTrajectoryBuilderOptions_descriptor_,
      LocalTrajectoryBuilderOptions::default_instance_,
      LocalTrajectoryBuilderOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalTrajectoryBuilderOptions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalTrajectoryBuilderOptions_descriptor_, &LocalTrajectoryBuilderOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  delete LocalTrajectoryBuilderOptions::default_instance_;
  delete LocalTrajectoryBuilderOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::kalman_filter::proto::protobuf_AddDesc_cartographer_2fkalman_5ffilter_2fproto_2fpose_5ftracker_5foptions_2eproto();
  ::cartographer::mapping_3d::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();
  ::cartographer::sensor::proto::protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  ::cartographer::mapping_2d::proto::protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fsubmaps_5foptions_2eproto();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_AddDesc_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_AddDesc_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nDcartographer/mapping_2d/proto/local_tr"
    "ajectory_builder_options.proto\022\035cartogra"
    "pher.mapping_2d.proto\032;cartographer/kalm"
    "an_filter/proto/pose_tracker_options.pro"
    "to\0329cartographer/mapping_3d/proto/motion"
    "_filter_options.proto\032=cartographer/sens"
    "or/proto/adaptive_voxel_filter_options.p"
    "roto\0323cartographer/mapping_2d/proto/subm"
    "aps_options.proto\032Lcartographer/mapping_"
    "2d/scan_matching/proto/ceres_scan_matche"
    "r_options.proto\032\\cartographer/mapping_2d"
    "/scan_matching/proto/real_time_correlati"
    "ve_scan_matcher_options.proto\"\217\006\n\035LocalT"
    "rajectoryBuilderOptions\022\036\n\026horizontal_la"
    "ser_min_z\030\001 \001(\002\022\036\n\026horizontal_laser_max_"
    "z\030\002 \001(\002\022*\n\"horizontal_laser_voxel_filter"
    "_size\030\003 \001(\002\022,\n$use_online_correlative_sc"
    "an_matching\030\005 \001(\010\022\\\n\035adaptive_voxel_filt"
    "er_options\030\006 \001(\01325.cartographer.sensor.p"
    "roto.AdaptiveVoxelFilterOptions\022\206\001\n*real"
    "_time_correlative_scan_matcher_options\030\007"
    " \001(\0132R.cartographer.mapping_2d.scan_matc"
    "hing.proto.RealTimeCorrelativeScanMatche"
    "rOptions\022h\n\032ceres_scan_matcher_options\030\010"
    " \001(\0132D.cartographer.mapping_2d.scan_matc"
    "hing.proto.CeresScanMatcherOptions\022Q\n\025mo"
    "tion_filter_options\030\r \001(\01322.cartographer"
    ".mapping_3d.proto.MotionFilterOptions\022R\n"
    "\024pose_tracker_options\030\n \001(\01324.cartograph"
    "er.kalman_filter.proto.PoseTrackerOption"
    "s\022F\n\017submaps_options\030\013 \001(\0132-.cartographe"
    "r.mapping_2d.proto.SubmapsOptions\022\024\n\014use"
    "_imu_data\030\014 \001(\010", 1295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_2d/proto/local_trajectory_builder_options.proto", &protobuf_RegisterTypes);
  LocalTrajectoryBuilderOptions::default_instance_ = new LocalTrajectoryBuilderOptions();
  LocalTrajectoryBuilderOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LocalTrajectoryBuilderOptions::kHorizontalLaserMinZFieldNumber;
const int LocalTrajectoryBuilderOptions::kHorizontalLaserMaxZFieldNumber;
const int LocalTrajectoryBuilderOptions::kHorizontalLaserVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions::kAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kPoseTrackerOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kSubmapsOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kUseImuDataFieldNumber;
#endif  // !_MSC_VER

LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
}

void LocalTrajectoryBuilderOptions::InitAsDefaultInstance() {
  adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(&::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::default_instance());
  real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(&::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::default_instance());
  ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions*>(&::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::default_instance());
  motion_filter_options_ = const_cast< ::cartographer::mapping_3d::proto::MotionFilterOptions*>(&::cartographer::mapping_3d::proto::MotionFilterOptions::default_instance());
  pose_tracker_options_ = const_cast< ::cartographer::kalman_filter::proto::PoseTrackerOptions*>(&::cartographer::kalman_filter::proto::PoseTrackerOptions::default_instance());
  submaps_options_ = const_cast< ::cartographer::mapping_2d::proto::SubmapsOptions*>(&::cartographer::mapping_2d::proto::SubmapsOptions::default_instance());
}

LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions(const LocalTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
}

void LocalTrajectoryBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  horizontal_laser_min_z_ = 0;
  horizontal_laser_max_z_ = 0;
  horizontal_laser_voxel_filter_size_ = 0;
  use_online_correlative_scan_matching_ = false;
  adaptive_voxel_filter_options_ = NULL;
  real_time_correlative_scan_matcher_options_ = NULL;
  ceres_scan_matcher_options_ = NULL;
  motion_filter_options_ = NULL;
  pose_tracker_options_ = NULL;
  submaps_options_ = NULL;
  use_imu_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalTrajectoryBuilderOptions::~LocalTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
    delete adaptive_voxel_filter_options_;
    delete real_time_correlative_scan_matcher_options_;
    delete ceres_scan_matcher_options_;
    delete motion_filter_options_;
    delete pose_tracker_options_;
    delete submaps_options_;
  }
}

void LocalTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalTrajectoryBuilderOptions_descriptor_;
}

const LocalTrajectoryBuilderOptions& LocalTrajectoryBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

LocalTrajectoryBuilderOptions* LocalTrajectoryBuilderOptions::default_instance_ = NULL;

LocalTrajectoryBuilderOptions* LocalTrajectoryBuilderOptions::New() const {
  return new LocalTrajectoryBuilderOptions;
}

void LocalTrajectoryBuilderOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LocalTrajectoryBuilderOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(horizontal_laser_min_z_, horizontal_laser_max_z_);
    ZR_(horizontal_laser_voxel_filter_size_, use_online_correlative_scan_matching_);
    if (has_adaptive_voxel_filter_options()) {
      if (adaptive_voxel_filter_options_ != NULL) adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
    }
    if (has_real_time_correlative_scan_matcher_options()) {
      if (real_time_correlative_scan_matcher_options_ != NULL) real_time_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::Clear();
    }
    if (has_ceres_scan_matcher_options()) {
      if (ceres_scan_matcher_options_ != NULL) ceres_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::Clear();
    }
    if (has_motion_filter_options()) {
      if (motion_filter_options_ != NULL) motion_filter_options_->::cartographer::mapping_3d::proto::MotionFilterOptions::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_pose_tracker_options()) {
      if (pose_tracker_options_ != NULL) pose_tracker_options_->::cartographer::kalman_filter::proto::PoseTrackerOptions::Clear();
    }
    if (has_submaps_options()) {
      if (submaps_options_ != NULL) submaps_options_->::cartographer::mapping_2d::proto::SubmapsOptions::Clear();
    }
    use_imu_data_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float horizontal_laser_min_z = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontal_laser_min_z_)));
          set_has_horizontal_laser_min_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_horizontal_laser_max_z;
        break;
      }

      // optional float horizontal_laser_max_z = 2;
      case 2: {
        if (tag == 21) {
         parse_horizontal_laser_max_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontal_laser_max_z_)));
          set_has_horizontal_laser_max_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_horizontal_laser_voxel_filter_size;
        break;
      }

      // optional float horizontal_laser_voxel_filter_size = 3;
      case 3: {
        if (tag == 29) {
         parse_horizontal_laser_voxel_filter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontal_laser_voxel_filter_size_)));
          set_has_horizontal_laser_voxel_filter_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_online_correlative_scan_matching;
        break;
      }

      // optional bool use_online_correlative_scan_matching = 5;
      case 5: {
        if (tag == 40) {
         parse_use_online_correlative_scan_matching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));
          set_has_use_online_correlative_scan_matching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adaptive_voxel_filter_options;
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
      case 6: {
        if (tag == 50) {
         parse_adaptive_voxel_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_real_time_correlative_scan_matcher_options;
        break;
      }

      // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
      case 7: {
        if (tag == 58) {
         parse_real_time_correlative_scan_matcher_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ceres_scan_matcher_options;
        break;
      }

      // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
      case 8: {
        if (tag == 66) {
         parse_ceres_scan_matcher_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pose_tracker_options;
        break;
      }

      // optional .cartographer.kalman_filter.proto.PoseTrackerOptions pose_tracker_options = 10;
      case 10: {
        if (tag == 82) {
         parse_pose_tracker_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_tracker_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_submaps_options;
        break;
      }

      // optional .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
      case 11: {
        if (tag == 90) {
         parse_submaps_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_imu_data;
        break;
      }

      // optional bool use_imu_data = 12;
      case 12: {
        if (tag == 96) {
         parse_use_imu_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_imu_data_)));
          set_has_use_imu_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_motion_filter_options;
        break;
      }

      // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 13;
      case 13: {
        if (tag == 106) {
         parse_motion_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  return false;
#undef DO_
}

void LocalTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  // optional float horizontal_laser_min_z = 1;
  if (has_horizontal_laser_min_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->horizontal_laser_min_z(), output);
  }

  // optional float horizontal_laser_max_z = 2;
  if (has_horizontal_laser_max_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->horizontal_laser_max_z(), output);
  }

  // optional float horizontal_laser_voxel_filter_size = 3;
  if (has_horizontal_laser_voxel_filter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->horizontal_laser_voxel_filter_size(), output);
  }

  // optional bool use_online_correlative_scan_matching = 5;
  if (has_use_online_correlative_scan_matching()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_online_correlative_scan_matching(), output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (has_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->adaptive_voxel_filter_options(), output);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (has_real_time_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->real_time_correlative_scan_matcher_options(), output);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
  if (has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ceres_scan_matcher_options(), output);
  }

  // optional .cartographer.kalman_filter.proto.PoseTrackerOptions pose_tracker_options = 10;
  if (has_pose_tracker_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pose_tracker_options(), output);
  }

  // optional .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
  if (has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->submaps_options(), output);
  }

  // optional bool use_imu_data = 12;
  if (has_use_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_imu_data(), output);
  }

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 13;
  if (has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->motion_filter_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  // optional float horizontal_laser_min_z = 1;
  if (has_horizontal_laser_min_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->horizontal_laser_min_z(), target);
  }

  // optional float horizontal_laser_max_z = 2;
  if (has_horizontal_laser_max_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->horizontal_laser_max_z(), target);
  }

  // optional float horizontal_laser_voxel_filter_size = 3;
  if (has_horizontal_laser_voxel_filter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->horizontal_laser_voxel_filter_size(), target);
  }

  // optional bool use_online_correlative_scan_matching = 5;
  if (has_use_online_correlative_scan_matching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_online_correlative_scan_matching(), target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (has_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->adaptive_voxel_filter_options(), target);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (has_real_time_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->real_time_correlative_scan_matcher_options(), target);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
  if (has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ceres_scan_matcher_options(), target);
  }

  // optional .cartographer.kalman_filter.proto.PoseTrackerOptions pose_tracker_options = 10;
  if (has_pose_tracker_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pose_tracker_options(), target);
  }

  // optional .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
  if (has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->submaps_options(), target);
  }

  // optional bool use_imu_data = 12;
  if (has_use_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_imu_data(), target);
  }

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 13;
  if (has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->motion_filter_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  return target;
}

int LocalTrajectoryBuilderOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float horizontal_laser_min_z = 1;
    if (has_horizontal_laser_min_z()) {
      total_size += 1 + 4;
    }

    // optional float horizontal_laser_max_z = 2;
    if (has_horizontal_laser_max_z()) {
      total_size += 1 + 4;
    }

    // optional float horizontal_laser_voxel_filter_size = 3;
    if (has_horizontal_laser_voxel_filter_size()) {
      total_size += 1 + 4;
    }

    // optional bool use_online_correlative_scan_matching = 5;
    if (has_use_online_correlative_scan_matching()) {
      total_size += 1 + 1;
    }

    // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
    if (has_adaptive_voxel_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adaptive_voxel_filter_options());
    }

    // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
    if (has_real_time_correlative_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_time_correlative_scan_matcher_options());
    }

    // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
    if (has_ceres_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ceres_scan_matcher_options());
    }

    // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 13;
    if (has_motion_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_filter_options());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cartographer.kalman_filter.proto.PoseTrackerOptions pose_tracker_options = 10;
    if (has_pose_tracker_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose_tracker_options());
    }

    // optional .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
    if (has_submaps_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submaps_options());
    }

    // optional bool use_imu_data = 12;
    if (has_use_imu_data()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalTrajectoryBuilderOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions::MergeFrom(const LocalTrajectoryBuilderOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_laser_min_z()) {
      set_horizontal_laser_min_z(from.horizontal_laser_min_z());
    }
    if (from.has_horizontal_laser_max_z()) {
      set_horizontal_laser_max_z(from.horizontal_laser_max_z());
    }
    if (from.has_horizontal_laser_voxel_filter_size()) {
      set_horizontal_laser_voxel_filter_size(from.horizontal_laser_voxel_filter_size());
    }
    if (from.has_use_online_correlative_scan_matching()) {
      set_use_online_correlative_scan_matching(from.use_online_correlative_scan_matching());
    }
    if (from.has_adaptive_voxel_filter_options()) {
      mutable_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.adaptive_voxel_filter_options());
    }
    if (from.has_real_time_correlative_scan_matcher_options()) {
      mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
    }
    if (from.has_ceres_scan_matcher_options()) {
      mutable_ceres_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::MergeFrom(from.ceres_scan_matcher_options());
    }
    if (from.has_motion_filter_options()) {
      mutable_motion_filter_options()->::cartographer::mapping_3d::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pose_tracker_options()) {
      mutable_pose_tracker_options()->::cartographer::kalman_filter::proto::PoseTrackerOptions::MergeFrom(from.pose_tracker_options());
    }
    if (from.has_submaps_options()) {
      mutable_submaps_options()->::cartographer::mapping_2d::proto::SubmapsOptions::MergeFrom(from.submaps_options());
    }
    if (from.has_use_imu_data()) {
      set_use_imu_data(from.use_imu_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions::CopyFrom(const LocalTrajectoryBuilderOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions::IsInitialized() const {

  return true;
}

void LocalTrajectoryBuilderOptions::Swap(LocalTrajectoryBuilderOptions* other) {
  if (other != this) {
    std::swap(horizontal_laser_min_z_, other->horizontal_laser_min_z_);
    std::swap(horizontal_laser_max_z_, other->horizontal_laser_max_z_);
    std::swap(horizontal_laser_voxel_filter_size_, other->horizontal_laser_voxel_filter_size_);
    std::swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
    std::swap(adaptive_voxel_filter_options_, other->adaptive_voxel_filter_options_);
    std::swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
    std::swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
    std::swap(motion_filter_options_, other->motion_filter_options_);
    std::swap(pose_tracker_options_, other->pose_tracker_options_);
    std::swap(submaps_options_, other->submaps_options_);
    std::swap(use_imu_data_, other->use_imu_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalTrajectoryBuilderOptions_descriptor_;
  metadata.reflection = LocalTrajectoryBuilderOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
